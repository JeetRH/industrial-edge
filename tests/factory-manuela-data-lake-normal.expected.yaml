---
# Source: datalake/templates/factory-kafka-cluster/kafka-tls-certificate-and-key.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kafka-tls-certificate-and-key
  namespace: factory-lake
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURsekNDQW4rZ0F3SUJBZ0lVRGlGMzg2ajZCaThuS3pIbWF2ZG1xZTBqTnpJd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1d6RUxNQWtHQTFVRUJoTUNSRVV4RURBT0JnTlZCQXNNQjAxaGJuVmxiR0V4T2pBNEJnTlZCQU1NTVNvdQpZWEJ3Y3k1bFpHZGxMVzFuYlhRdGFIVmlMbWRqY0M1a1pYWmpiSFZ6ZEdWeUxtOXdaVzV6YUdsbWRDNWpiMjB3CkhoY05NakF4TURBNE1UQXdPVEE1V2hjTk1qRXhNREE0TVRBd09UQTVXakJiTVFzd0NRWURWUVFHRXdKRVJURVEKTUE0R0ExVUVDd3dIVFdGdWRXVnNZVEU2TURnR0ExVUVBd3d4S2k1aGNIQnpMbVZrWjJVdGJXZHRkQzFvZFdJdQpaMk53TG1SbGRtTnNkWE4wWlhJdWIzQmxibk5vYVdaMExtTnZiVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFECmdnRVBBRENDQVFvQ2dnRUJBTnpUMG9mOHZWbW9hbVNzV3lRcERmZzdUdDNZUm1JazNGQUx5bWgzeE1jalpVdVkKaTcwck1QMUJZZGxneDR1bDliUWxPMGRqMmdGR2dlcGNlMjU4NVVVRG1NQXdBTGdwZ2lvVlV0MnFBaG9ESWQzeQp0UDRmdDk3WEdlYjJTSHg2RzczMXpXYi9vWXJZN1lud1JqWjlWNC9qdEwxeWlJQ1pzalppczFwcFlpTTJ6Ym5xCkRDM1lLRm5oSFhwUlJjaGRlQ0dqVWlJaG9nRngwMlJUZUdJVFFJV2Q4a3dhV2tRWkNTYllZV0NTU09mZkRUb0QKREV4ZGgrdm1GSDhjRC8xZFExVlBuTEtLeXdSWmdOd3dhK0VySzJ0c3NEYUlmZWxqYWdrWURXczVFMVBWOGRpMApoaFBDaGM0bnhXeFJISnk0ZUlnUERwajVPZTY3WjFZSERWTFRZYTBDQXdFQUFhTlRNRkV3SFFZRFZSME9CQllFCkZGVUFCSDJBeTdhWUE0QjNaeG0xMnowV2ZiSXNNQjhHQTFVZEl3UVlNQmFBRkZVQUJIMkF5N2FZQTRCM1p4bTEKMnowV2ZiSXNNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQWdWQ1FsYgpXSXo1U1N0Mm5LTno2Qnc0ZmwwbGpmQTBMSVZHR09LUTA4cGhESndSQTRORklKMkRtdjJ5YWlXWDVybXZ1UkM2CkwwTHVWTzhJTnhmWncxR05VTzFyMkhza1N0c0w2WGVoTHlnRmtpNUU0cGMwRk5wZU8zQ1ErbGJWYkg5eE8wWnYKdTdUOTdkSkg2T1BPdzM2NVBRZ0dCaXJwOHBRL3Jsbm5PajZhdi90T2orbFp2MnkrMW1welgwZmhqd2NUQTRVMAppa25JY1FnbnlORUxCT1pwMFNoWnNKNHlxdTVtdDhNMVpkazhuN2g0UWYrVWJJSm5ReW5hWUoyVWx0Q01MbXRLClJlT3o0N3Rnamg1REZ4dngvVCtWeTlLdVhESzBXS09VZi9tZ1Zzd1BFV2MzUUR0N0FRVjVZY05mMHdpUGFvaXcKSGhNcDVSY2FudmI1dEt3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2d0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktrd2dnU2xBZ0VBQW9JQkFRRGMwOUtIL0wxWnFHcGsKckZza0tRMzRPMDdkMkVaaUpOeFFDOHBvZDhUSEkyVkxtSXU5S3pEOVFXSFpZTWVMcGZXMEpUdEhZOW9CUm9IcQpYSHR1Zk9WRkE1akFNQUM0S1lJcUZWTGRxZ0lhQXlIZDhyVCtIN2ZlMXhubTlraDhlaHU5OWMxbS82R0syTzJKCjhFWTJmVmVQNDdTOWNvaUFtYkkyWXJOYWFXSWpOczI1Nmd3dDJDaFo0UjE2VVVYSVhYZ2hvMUlpSWFJQmNkTmsKVTNoaUUwQ0ZuZkpNR2xwRUdRa20yR0Zna2tqbjN3MDZBd3hNWFlmcjVoUi9IQS85WFVOVlQ1eXlpc3NFV1lEYwpNR3ZoS3l0cmJMQTJpSDNwWTJvSkdBMXJPUk5UMWZIWXRJWVR3b1hPSjhWc1VSeWN1SGlJRHc2WStUbnV1MmRXCkJ3MVMwMkd0QWdNQkFBRUNnZ0VCQUtvbWFLU3hZREN5TFBCUFFaYTJMM1ppTkYySlpJb0F2dVRLZ1BaSHVvNTYKUG5XbUg1M3RwcnlzNFRrK2NlS3ZTSWU2M0ZjZ24veTFtQ3E5Z2JuYmNFamlBWk9zS1JHOW9mYk5JV0Y4dWt2Uwp1QWl0RnpwcnRDQjIreFZVRlB3Y2xqMmpKTlpGQi9MVlBRbzQ0ZERnZVZSOGJtbyswdURNREY0TlpRYTRCbzc4Ckg3dHRWcUJYRDRjamJQVysreVB1V0tqd2kvV0pqUzliSHZlOEtTNDF4MWtiV1JtakR0Umw2Z0IwWXk5aUJiRXYKOFdBWE9uNENoSDhpTHZTVFVjZ2doUkt0R2g4L1BwRU42M1c1UHRpSzlmci9VcSs3U1E2Zkh2L0owREVrU3pwVwp0U1c4bTdBUlB0TzBidCtQbnM5TXpIT053NG0xdVVFN0JuaHgwSCszUzEwQ2dZRUE4NGMyQ3JtMTNkSUFLYzhwCjlId1BocU9OZEdieitBUUdweUxGTCsySVRZZWxuSlR0N3BvUDlmcnhNZUdTTDZocGt4UWYvY1BEOGtZUmltMW8KRHRjRkZqL1h4VjllMFBucUFRMUJDcURWUXRxQ3Vtay9pKzhVdTJnbitvNmFRVzI2dTV0VmtPWHh4NEFZSDNXWApFSUh2a0RjdzY3Y3o3aEFWaDBDTUlNU2hTWk1DZ1lFQTZDTDkrSkxGYS9HTXcvS040dTdpWTNzd2l2MWF2VVBaClltK0tvMjY3czJaRXhmalFZbkMxcWFBZDVnaVg5QXA5Q0hlSTlPMEE0L1cwR29EbUJrWGNWR00xcmI0QWRJQXUKQnhrRGdOczMyUjAydWN3NGNJMFhoWXVHVTZxMUo1elNBN0E3K2F3YTBPS2lnd3ltZWdvYmxzZVRtamZVdmw5RApNbWwyUENWR3I3OENnWUJnWWZrL2tYU3JVRHdFVUJ1WXlha1RicFBEcUNPUzIzVU9uVEpSMzc3OGdGMUpkYUFkCnVSZnNFTjk1RUgvZElOaDMvNVVSeUhNNjVnUjNOd25pSmJPN3RKVGZadm1OMS91SFl3bUUvVmFxV1BVNGRnTlMKak5NMXdPbGh2eUxLRm5XN1hxVWs3ZjBkS2xOaDBCWnowQmxTaUtWeUJWWW1PSE5zemwwbmN1c3F4UUtCZ1FERwpaZ0hDRFU4RjdyQnNXRVhFQ244YW54TGg5NTh4MjJkVHBobExqVHlIRzRUejNxL2JNcEZRcERScGdqYThzS29rCkxtV3pUMHhQaUpPaGcwRVZZMmZvQjlLODU0TGtEeGxIbjYxSzJCRm5VbnlQVjJkMWFtRU1GaTk4R280eGlPcEYKbEwzdHFaWlJxU0ZUOTkvZ3RmcldaMFJUcmh2NWlObVpvR0VaRHBMWGFRS0JnUUNxcjNub3JXZ2dSNDVjd3JXTApxYXVoSDhXVTBUS2NuWUdQTkZpNzI4VEZ3RUlVVk9Kb1JsUWNqUTVCWU1wVDNTMTY5OHE1eHZYN2huVjE3MVhkCjB3eW1qaWt1UDRBOE5ub3BRbkVxVGRGMDBORHNCRjFMTHhPYVJ1aDdPQ1pESHZhMG5FR01DRmsxZVBaanVTWnUKNVQ1ZTRlcndEMFhqTUhJYjBnZ2I5YytDMFE9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==

# It is beyond a bad practise to check in private keys into git repos
# there are a number of approaches to make this work, e.g. by encryption (e.g. sealedsecrets)
# or by storing a reference to a key in a key vault. 

# Since this is just a demo and this self-signed wildcard cert
# is not used beyond the kafka connectivity between mirrormaker and the kafka cluster
# which run behind a firewall we find the risk of the private key leaking to be 
# acceptable.

# This secret was created by running
# export MYDOMAIN=apps.edge-mgmt-hub.gcp.devcluster.openshift.com
# openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem -subj "/C=DE/OU=Manuela/CN=*.${MYDOMAIN}"
# oc create secret tls kafka-tls-certificate-and-key --key key.pem --cert certificate.pem
---
# Source: datalake/templates/factory-mirror-maker/kafka-tls-certificate.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kafka-tls-certificate
  namespace: factory-mirror-maker
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURtakNDQW9LZ0F3SUJBZ0lUZDVIeThGUkN6c0dwYmdWVmRLV2lrbEF4ZFRBTkJna3Foa2lHOXcwQkFRc0YKQURCZE1Rc3dDUVlEVlFRR0V3SkVSVEVRTUE0R0ExVUVDd3dIVFdGdWRXVnNZVEU4TURvR0ExVUVBd3d6S2k1aApjSEJ6TG1SaGRHRmpaVzUwWlhJdWJXRnVkV1ZzWVdSakxtSnNkV1Z3Y21sdWRITXVjbWhsWTI5bGJtY3VZMjl0Ck1CNFhEVEl4TURZd016RTRNekUxT1ZvWERUSXlNRFl3TXpFNE16RTFPVm93WFRFTE1Ba0dBMVVFQmhNQ1JFVXgKRURBT0JnTlZCQXNNQjAxaGJuVmxiR0V4UERBNkJnTlZCQU1NTXlvdVlYQndjeTVrWVhSaFkyVnVkR1Z5TG0xaApiblZsYkdGa1l5NWliSFZsY0hKcGJuUnpMbkpvWldOdlpXNW5MbU52YlRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCCkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU1JU1lvZjNmaVFjZDNEZnZjU2l2ZXBVd0UwelQxZ0pCS05Yd2dqM2RrK0gKWTViR1lhaDRQQldSQ3oxcEVpY1Z0a1dxZXkvZGNWUnpVdzZxOGZidERVcGRwUlhBQUlKbWllM1lST1BrWG9OZwpqek4zMHFTUXdWMDhGODhvV0VUb01PMkxzM1VsWGx2d2ZEUWZQdmdEdm1VMlhrWHU2VmppREZFSWowdXhpRmdqCmd6cVNVTVpvZUtYYlN2Zi9KYm1yQUw4bEpUcXdnOWEraUR4ZVBYdStMTWZHT1hJdnF4aSsrUndJaHpCSThoaysKVEluTmhMVHlQUk5LZUwrZmtVQjBKQ29zMGJ1dDhrYUhGOE9QRVJTaE9hWCtob1g2aDBoL0hSOGlRSHdFb3JJMQpzTUFmZzJFSktwVjRwUHorQXpyT3lHb1ozMDVRbEp2SU9NOTNmc1BleXBzQ0F3RUFBYU5UTUZFd0hRWURWUjBPCkJCWUVGSUFnR01FT01OdUZRSVVMSzluR2JZYjBNUWRLTUI4R0ExVWRJd1FZTUJhQUZJQWdHTUVPTU51RlFJVUwKSzluR2JZYjBNUWRLTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUQ3WQpLRVdkdXZwdE1xMFR1bzkvYW4yZXRZRG1UbnNGaTBOblRzbEVGT0gySHk5TTlmU0IzS3h0SEovdFNIWG9jOUI0CnRIcy9NeEFtbTMza09jN3hDMll0WTE3YVJCa3ZraHV4ZTRteklGeXgwY0s0RTFpa0dNZUZ2Z1lXVmxPZkFBMGwKVm5SR0ZLVHE3aitlbHM4dXpRVk4rV3pNNDZVLzF3WTlnY3ZlbGJIUE9mZ3g0M2lqb212M3E1VEUreHNRbHQ4dQphMUZnSEkwK0JHR1dwRVhsK2JLM0J3OStxQ2tzSjNZR3E5eWFBcktlcVp2OUVDQlJuMTdnY3R6b1FCN3QwRkN6CmFxbVB0MlFURG9BczBkcy9Fam5ENEZ2YmxBbVJRYklwbk9DNjg2TVlNeWd0bGVkUU9XSkdNTXowVWRwalJ6YTcKNmpGV0t1VzNmYW45V3RYSm1xOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: datalake/templates/factory-s3-store/kafka-to-s3-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-to-s3-config
  namespace: factory-s3-store
data:
  application.properties: |
    
    kafka.broker.uri=kafka-cluster-kafka-bootstrap.factory-s3-store.svc:9092
    kafka.broker.topic.temperature=manuela-factory.iot-sensor-sw-temperature
    kafka.broker.topic.vibration=manuela-factory.iot-sensor-sw-vibration

    s3.region=us-west-1
    s3.bucket.name=manuela-data-lake
    s3.message.aggregation.count=10
    s3.custom.endpoint.enabled=true
    # Convert this directory into a helm chart and use templating to set this
    s3.custom.endpoint.url=s3-openshift-storage.apps.edge-XXXXX.BASEDOMAIN
---
# Source: datalake/templates/factory-s3-store/kafka-to-s3-integration.yaml
apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  name: kafka-to-s3-integration
  namespace: factory-s3-store
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true 
spec:
  configuration:
    - type: configmap
      value: kafka-to-s3-config
    - type: secret
      value: s3-secret  
  profile: OpenShift
  sources:
    - content: |
       // dependency=camel:camel-endpointdsl
        package com.redhat.manuela.routes;
        import java.io.ByteArrayInputStream;
        import java.util.Iterator;
        import java.util.List;

        import org.apache.camel.Exchange;
        import org.apache.camel.Processor;
        import org.apache.camel.PropertyInject;
        import org.apache.camel.builder.RouteBuilder;
        import org.apache.camel.component.aws2.s3.AWS2S3Constants;
        import org.apache.camel.builder.endpoint.dsl.AWS2S3EndpointBuilderFactory;
        import org.apache.camel.model.OnCompletionDefinition;
        import org.apache.camel.processor.aggregate.GroupedBodyAggregationStrategy;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;

        public class Kafka2S3Route extends RouteBuilder {

            private static final Logger LOGGER = LoggerFactory.getLogger(Kafka2S3Route.class);

            @PropertyInject("s3.custom.endpoint.enabled")
            private String s3_custom_endpoint_enabled;

            @PropertyInject("s3.custom.endpoint.url")
            private String s3_custom_endpoint_url;

            @PropertyInject("s3.accessKey")
            private String s3_accessKey;
            @PropertyInject("s3.secretKey")
            private String s3_secretKey;
            @PropertyInject("s3.message.aggregation.count")
            private String s3_message_aggregation_count;

            @PropertyInject("s3.region")
            private String s3_region;
            @Override
            public void configure() throws Exception {
                storeTemperatureInS3();
                storeVibrationInS3();
            }
            private void storeVibrationInS3() {
                String key = "accessKey=" + s3_accessKey;
                String secret="&secretKey=" + s3_secretKey;
                String region = "&region=" + s3_region;
            	String s3params = key
                + secret
                + region;

                from("kafka:manuela-factory.iot-sensor-sw-vibration?brokers=kafka-cluster-kafka-bootstrap.factory-lake.svc:9092")
                    .convertBodyTo(String.class)
                    .aggregate(simple("true"), new GroupedBodyAggregationStrategy()).completionSize(s3_message_aggregation_count)
                    .process(new Processor() {
                            @Override
                            public void process(Exchange exchange) throws Exception {
                                List<Exchange> data = exchange.getIn().getBody(List.class);
                                StringBuffer sb = new StringBuffer();
                                for (Iterator iterator = data.iterator(); iterator.hasNext();) {
                                    String ex = (String) iterator.next();
                                    sb.append(ex+"\\n");
                                }
                                exchange.getIn().setBody(new ByteArrayInputStream(sb.toString().getBytes()));
                            }
                        })
                    // .to(\"file:/var/tmp/\");
                    .setHeader(AWS2S3Constants.KEY, simple("manuela-vibration-${date:now}.txt"))
                    .to("aws2-s3://manuela-data-lake?" + s3params)
                    .log("Uploaded Vibration dataset to S3");
            }
            private void storeTemperatureInS3() {
                String key = "accessKey=" + s3_accessKey;
                String secret="&secretKey=" + s3_secretKey;
                String region = "&region=" + s3_region;
            	String s3params = key
                   + secret
                   + region;
                from("kafka:manuela-factory.iot-sensor-sw-temperature?brokers=kafka-cluster-kafka-bootstrap.factory-lake.svc:9092")
                    .convertBodyTo(String.class)
                    .aggregate(simple("true"), new GroupedBodyAggregationStrategy()).completionSize(s3_message_aggregation_count)
                    .process(new Processor() {
                            @Override
                            public void process(Exchange exchange) throws Exception {
                                List<Exchange> data = exchange.getIn().getBody(List.class);
                                StringBuffer sb = new StringBuffer();
                                for (Iterator iterator = data.iterator(); iterator.hasNext();) {
                                    String ex = (String) iterator.next();
                                    sb.append(ex+"\n");
                                }
                                exchange.getIn().setBody(new ByteArrayInputStream(sb.toString().getBytes()));
                            }
                        })
                    // .to(\"file:/var/tmp/\");
                    .setHeader(AWS2S3Constants.KEY, simple("manuela-temperature-${date:now}.txt"))
                    .to("aws2-s3://manuela-data-lake?" + s3params)
                    .log("Uploaded Temperature dataset to S3");
            }
            @Override
            public OnCompletionDefinition onCompletion() {
                return super.onCompletion();
            }
        }
      name: Kafka2S3Route.java
---
# Source: datalake/templates/factory-s3-store/camel-k-integration-platform.yaml
apiVersion: camel.apache.org/v1
kind: IntegrationPlatform
metadata:
  name: camel-k
  namespace: factory-s3-store
  labels:
    app: "camel-k"
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true 
spec:
  configuration:
  - type: repository
    value: https://maven.repository.redhat.com/ga/all@id=redhat.ea
---
# Source: datalake/templates/factory-kafka-cluster/kafka-cluster.yaml
apiVersion: kafka.strimzi.io/v1beta1
kind: Kafka
metadata:
  name: kafka-cluster
  namespace: factory-lake
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  kafka:
    version: 2.6.0
    replicas: 3
    listeners:
      plain: {}
      tls: {}
      external:
        type: route
        overrides:
          bootstrap:
            # Convert this directory into a helm chart and use templating to set this
            # Or, figure out some way to use a value like 'kubernetes.default.svc'
            host: bootstrap-factory-lake-kafka-cluster.apps.edge-XXXXX.BASEDOMAIN
        configuration:
          brokerCertChainAndKey:
            certificate: tls.crt
            key: tls.key
            secretName: kafka-tls-certificate-and-key
    config:
      log.message.format.version: '2.6'
      offsets.topic.replication.factor: 3
      transaction.state.log.min.isr: 2
      transaction.state.log.replication.factor: 3
    storage:
      type: ephemeral
  zookeeper:
    replicas: 3
    storage:
      type: ephemeral  
  entityOperator:
    topicOperator: {}
    userOperator: {}
---
# Source: datalake/templates/factory-mirror-maker/factory-to-central-mirror-maker2.yaml
apiVersion: kafka.strimzi.io/v1alpha1
kind: KafkaMirrorMaker2
metadata:
  name: factory-to-central
  namespace: factory-mirror-maker
spec:
  version: 2.6.0
  replicas: 1
  connectCluster: manuela-central
  clusters:
    - alias: manuela-central
      bootstrapServers: 'bootstrap-manuela-data-lake-central-kafka-cluster.apps.datacenter-XXXXX.BASEDOMAIN:443'
      tls:
        trustedCertificates:
        - certificate: tls.crt
          secretName: kafka-tls-certificate
    - alias: manuela-factory
      bootstrapServers: 'manuela-kafka-cluster-kafka-bootstrap.manuela-stormshift-messaging.svc:9092'
      config:
        config.storage.replication.factor: 1
        offset.storage.replication.factor: 1
        status.storage.replication.factor: 1  
  mirrors:
    - sourceCluster: manuela-factory
      targetCluster: manuela-central
      sourceConnector:
        config:
          replication.factor: 1
          offset-syncs.topic.replication.factor: 1
          sync.topic.acls.enabled: 'false'
      heartbeatConnector:
        config:
          heartbeats.topic.replication.factor: 1
      checkpointConnector:
        config:
          checkpoints.topic.replication.factor: 1
      topicsPattern: .*
      groupsPattern: .*
